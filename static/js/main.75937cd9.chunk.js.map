{"version":3,"sources":["components/Name.js","components/Button.js","components/Score.js","App.js","index.js"],"names":["Name","react_default","a","createElement","className","this","props","name","surname","React","Component","Button","onClick","updateIndex","Score","attempts","percentage","Math","round","score","isNaN","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleInput","event","setState","answer","target","value","handleKeyPress","key","incrementIndex","index","state","names","_this2","fetch","then","response","json","data","console","log","text","userAnswer","toLowerCase","replace","currentIndex","region","input","focus","_this3","currentName","length","ref","type","placeholder","onChange","updateAnswer","onKeyPress","src_components_Name","components_Button","components_Score","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.75937cd9.chunk.js","sourcesContent":["import React from 'react';\nimport './Name.css';\n\nclass Name extends React.Component {\n\n    render(){\n\n        //console.log(this.props.name);\n        \n        return(\n            <div className=\"name\">{this.props.name} {this.props.surname}</div>\n        );\n\n    }\n}\n\nexport default Name;","import React from 'react';\nimport './button.css';\n\nclass Button extends React.Component {\n\n    render(){\n\n        let buttonText = \"Answer\";\n        \n        return (\n            <button className=\"button\" onClick={this.props.updateIndex}>{buttonText}</button>\n        );\n    }\n\n}\n\nexport default Button;","import React from 'react';\nimport './score.css';\n\n\nclass Score extends React.Component {\n\n    render(){\n\n        var attempts = this.props.attempts;\n        var percentage = Math.round((this.props.score / attempts) * 100);\n    \n        if (isNaN(percentage)){\n            percentage = \"-\";\n        }\n    \n        // if attempts is not yet defined, set it to zero\n        if (isNaN(attempts)){\n            attempts = 0;\n        }\n        \n        return (\n            <div className=\"results\">\n                <div className=\"score\">{this.props.score} / {attempts}</div>\n            </div>\n        );\n    }\n\n}\n\n\nexport default Score;","/*\nTODO\n  - finish button when you reach the end; if you get to the end of the array it still \n    tries to loop through to the next item\n  - maybe use .trim() instead of .replace() [only remove whitespace before and after \n    string, not in the middle as well]?\n*/\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport Name from './components/Name';\nimport Button from './components/Button';\nimport Score from './components/Score';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      names: [],\n      index: 0,\n      answer: \"\",\n      score: 0\n    };\n  }\n\n  componentDidMount(){\n    const url = \"https://uinames.com/api/?amount=100\";\n    fetch(url)\n      .then(response => response.json())\n      .then((data) => {\n        console.log(data);\n        this.setState({\n          names: data,\n        });\n      })\n  }\n\n  handleInput = (event) => {\n    this.setState({\n      answer: event.target.value \n    })\n  }\n\n\n  // when enter is clicked, check answer and update score/name\n  handleKeyPress = (event) => {\n    if (event.key === \"Enter\"){\n      this.answer();\n      this.incrementIndex();\n    }\n  }\n\n\n  incrementIndex = () => {\n    // don't allow the game to continue if no answer is inputted\n    if (this.answer() === false){\n      return false;\n    };\n    \n    this.setState({\n      index: this.state.index+1\n    })\n    \n  }\n\n  updateAnswer(text){\n    this.setState({\n      answer: text.target.value\n    })\n  }\n\n  answer(){\n\n    if (this.state.answer === ''){\n      return false;\n    }\n\n    // put input and answer to lower case and strip of white space before comparing values\n    let userAnswer = this.state.answer.toLowerCase().replace(/\\s+/g, ''); \n    const currentIndex = this.state.index;\n    const answer = this.state.names[currentIndex].region.toLowerCase().replace(/\\s+/g, '');\n\n    if (userAnswer === answer){\n      this.setState({\n        score: this.state.score+1\n      })\n    }\n\n    this.setState({\n      answer: \"\"\n    })\n\n    this.input.focus();\n  }\n\n  \n  render() {\n\n    let currentName = \"\";\n\n    if (this.state.names.length >= 1){\n      let currentIndex = this.state.index;\n      currentName = this.state.names[currentIndex];\n    }\n\n\n    return (\n      <div className=\"container\">\n\n        <div className=\"input\">\n          <input \n            className=\"input-field\"\n            ref = {(input) => {this.input = input}}\n            type=\"text\"\n            placeholder=\"Enter nation...\"\n            value = {this.state.answer}\n            onChange = {text => this.updateAnswer(text)}\n            onKeyPress = {this.handleKeyPress}\n          />\n        </div>\n        \n        <Name \n          name = {currentName.name}\n          surname = {currentName.surname}\n          region = {currentName.region}\n        />\n\n        <Button \n          index = {this.state.index}\n          updateIndex = {this.incrementIndex}\n        />\n\n        <Score \n          score = {this.state.score}\n          attempts = {this.state.index}\n        />\n\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}